{"version":3,"sources":["visualizer/Node/Node.jsx","algorithms/dijkstra.js","visualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distanceToFinishNode","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","visualize","class","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","toggleView","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6b872cb6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\n\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-light\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n              <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n              <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-success\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Find Shortest Route (Dijkstra's)\r\n        </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <div class=\"d-flex flex-row flex-wrap m-2 justify-content-around\">\t\r\n \t\t<div class=\"d-flex p-2\">\r\n \t\t\t<div class=\"key wall\"></div>  \r\n \t\t\t<div> Wall</div>\r\n \t\t</div>\r\n \t\t<div class=\"d-flex p-2\">\r\n \t\t\t<div class=\"key start\"></div>  \r\n \t\t\t<div>Start</div>\r\n \t\t</div>\r\n \t\t<div class=\"d-flex p-2\">\r\n \t\t\t<div class=\"key end\"></div>  \r\n \t\t\t<div>Target</div>\r\n \t\t</div>\r\n \t\t<div class=\"d-flex p-2\">\r\n \t\t\t<div class=\"key success\"></div>  \r\n \t\t\t<div>Shortest-Path</div>\r\n \t\t</div>\r\n \t\t<div class=\"d-flex p-2\">\r\n \t\t\t<div class=\"key\"></div>  \r\n \t\t\t<div>Unvisited</div>\r\n \t\t</div>\r\n \t</div>\r\n\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary btn-lg btn-block\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary btn-lg btn-block\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './visualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}